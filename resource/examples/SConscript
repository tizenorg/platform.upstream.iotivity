##
# Examples build script
##
Import('env')
# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/resource/third_party_libs.scons', 'lib_env')

examples_env = lib_env.Clone()

######################################################################
# Build flags
######################################################################
examples_env.AppendUnique(CPPPATH = [
		'../include/',
		'../csdk/stack/include',
		'../csdk/ocsocket/include',
		'../csdk/ocrandom/include',
		'../csdk/logger/include',
		'../csdk/libcoap',
		'../oc_logger/include'
		])

target_os = env.get('TARGET_OS')
if target_os not in ['windows', 'winrt']:
	examples_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])

	# Note: 'pthread' is in libc for android. On other platform, if use
	# new gcc(>4.9?) it isn't required, otherwise, it's required
	if target_os != 'android':
		examples_env.AppendUnique(LIBS = ['-lpthread'])

examples_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
examples_env.PrependUnique(LIBS = ['oc', 'octbstack', 'coap', 'oc_logger'])

if target_os == 'android':
	examples_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	examples_env.AppendUnique(LIBS = ['gnustl_static'])

	if not env.get('RELEASE'):
		examples_env.AppendUnique(LIBS = ['log'])

if target_os in ['darwin', 'ios']:
	examples_env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])

######################################################################
# Source files and Targets
######################################################################
simpleserver = examples_env.Program('simpleserver', 'simpleserver.cpp')
simpleserverHQ = examples_env.Program('simpleserverHQ', 'simpleserverHQ.cpp')
simpleclient = examples_env.Program('simpleclient', 'simpleclient.cpp')
simpleclientHQ = examples_env.Program('simpleclientHQ', 'simpleclientHQ.cpp')
fridgeserver = examples_env.Program('fridgeserver', 'fridgeserver.cpp')
fridgeclient = examples_env.Program('fridgeclient', 'fridgeclient.cpp')
presenceserver = examples_env.Program('presenceserver', 'presenceserver.cpp')
presenceclient = examples_env.Program('presenceclient', 'presenceclient.cpp')
simpleclientserver = examples_env.Program('simpleclientserver', 'simpleclientserver.cpp')
roomserver = examples_env.Program('roomserver', 'roomserver.cpp')
roomclient = examples_env.Program('roomclient', 'roomclient.cpp')
garageserver = examples_env.Program('garageserver', 'garageserver.cpp')
garageclient = examples_env.Program('garageclient', 'garageclient.cpp')
devicediscoveryserver = examples_env.Program('devicediscoveryserver', 'devicediscoveryserver.cpp')
devicediscoveryclient = examples_env.Program('devicediscoveryclient', 'devicediscoveryclient.cpp')

Alias("examples", [simpleserver, simpleserverHQ, simpleclient, simpleclientHQ,
		fridgeserver, fridgeclient, presenceserver, presenceclient,
		simpleclientserver, roomserver, roomclient, garageserver,
		garageclient, devicediscoveryserver, devicediscoveryclient])
env.AppendTarget('examples')

#ios doesn't allow run application from terminal, so won't build these examples
if target_os != 'ios':
	SConscript('ocicuc/SConscript')
