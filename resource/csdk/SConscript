#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# liboctbstack (share library) build script
##
Import('env')

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/resource/third_party_libs.scons', 'lib_env')

liboctbstack_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
# As in the source code, it includes arduino Time library (C++)
# It requires compile the .c with g++
if target_os == 'arduino':
	liboctbstack_env.Replace(CC = env.get('CXX'))
	liboctbstack_env.Replace(CFLAGS = env.get('CXXFLAGS'))

######################################################################
# Build flags
######################################################################
liboctbstack_env.PrependUnique(CPPPATH = [
		'../../extlibs/cjson/',
		'../../extlibs/timer/',
		'logger/include',
		'ocrandom/include',
		'ocmalloc/include',
		'stack/include',
		'stack/include/internal',
		'../oc_logger/include',
		'connectivity/lib/libcoap-4.1.1',
		'connectivity/inc',
		'connectivity/api',
		'security/include',
		'security/include/internal',
		])

if target_os not in ['arduino', 'windows', 'winrt']:
	liboctbstack_env.AppendUnique(CPPDEFINES  = ['WITH_POSIX'])
	liboctbstack_env.AppendUnique(CFLAGS = ['-std=c99'])

if target_os not in ['windows', 'winrt']:
	liboctbstack_env.AppendUnique(CFLAGS = ['-Wall'])

liboctbstack_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])

if target_os in ['android', 'linux', 'tizen']:
	liboctbstack_env.AppendUnique(LIBS = ['connectivity_abstraction'])
liboctbstack_env.AppendUnique(LIBS = ['coap', 'm'])

if target_os == 'tizen':
    liboctbstack_env.ParseConfig("pkg-config --cflags --libs uuid")

if target_os not in ['android', 'arduino', 'windows', 'winrt']:
	liboctbstack_env.AppendUnique(LIBS = ['pthread'])

if target_os == 'arduino':
	liboctbstack_env.AppendUnique(CPPDEFINES = ['NDEBUG', 'WITH_ARDUINO'])
elif target_os not in ['darwin','ios']:
	liboctbstack_env.AppendUnique(CFLAGS = ['-fPIC'])
if target_os in ['darwin', 'ios']:
	env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])
	liboctbstack_env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])
	liboctbstack_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
if target_os not in ['arduino']:
	liboctbstack_env.AppendUnique(LINKFLAGS = ['-Wl,--no-undefined'])

if env.get('SECURED') == '1':
	liboctbstack_env.AppendUnique(LIBS = ['tinydtls'])

if env.get('LOGGING'):
	liboctbstack_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
OCTBSTACK_SRC = 'stack/src/'
liboctbstack_src = [
	'../../extlibs/cjson/cJSON.c',
	'../../extlibs/timer/timer.c',
	OCTBSTACK_SRC + 'ocstack.c',
	OCTBSTACK_SRC + 'occlientcb.c',
	OCTBSTACK_SRC + 'ocresource.c',
	OCTBSTACK_SRC + 'ocobserve.c',
	OCTBSTACK_SRC + 'ocserverrequest.c',
	OCTBSTACK_SRC + 'occollection.c',
	OCTBSTACK_SRC + 'oicgroup.c',
	'security/src/ocsecurity.c',
	'logger/src/logger.c',
	'ocrandom/src/ocrandom.c',
	'ocmalloc/src/ocmalloc.c'
	]
if target_os in ['arduino','darwin','ios'] :
	static_liboctbstack = liboctbstack_env.StaticLibrary('octbstack', liboctbstack_src)
	liboctbstack_env.InstallTarget(static_liboctbstack, 'liboctbstack')
else:
	static_liboctbstack = liboctbstack_env.StaticLibrary('octbstack', liboctbstack_src)
	shared_liboctbstack = liboctbstack_env.SharedLibrary('octbstack', liboctbstack_src)
	liboctbstack_env.InstallTarget([static_liboctbstack, shared_liboctbstack], 'liboctbstack')

